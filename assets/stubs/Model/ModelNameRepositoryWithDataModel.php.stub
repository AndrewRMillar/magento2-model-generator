<?php

declare(strict_types=1);

namespace {{ VendorName }}\{{ ModuleName }}\Model;

use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\Api\ExtensibleDataObjectConverter;
use Magento\Framework\Api\ExtensionAttribute\JoinProcessorInterface;
use Magento\Framework\Api\SearchCriteria\CollectionProcessorInterface;
use Magento\Framework\Api\SearchCriteriaInterface;
use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Reflection\DataObjectProcessor;
use {{ VendorName }}\{{ ModuleName }}\Api\Data\{{ ModelName }}Interface;
use {{ VendorName }}\{{ ModuleName }}\Api\Data\{{ ModelName }}InterfaceFactory;
use {{ VendorName }}\{{ ModuleName }}\Api\Data\{{ ModelName }}SearchResultsInterface;
use {{ VendorName }}\{{ ModuleName }}\Api\Data\{{ ModelName }}SearchResultsInterfaceFactory;
use {{ VendorName }}\{{ ModuleName }}\Api\{{ ModelName }}RepositoryInterface;
use {{ VendorName }}\{{ ModuleName }}\Model\ResourceModel\{{ ModelName }} as Resource{{ ModelName }};
use {{ VendorName }}\{{ ModuleName }}\Model\ResourceModel\{{ ModelName }}\CollectionFactory as {{ ModelName }}CollectionFactory;

class {{ ModelName }}Repository implements {{ ModelName }}RepositoryInterface
{
    public function __construct(
        protected readonly Resource{{ ModelName }} $resource,
        protected readonly {{ ModelName }}Factory ${{ VariableName }}Factory,
        protected readonly {{ ModelName }}InterfaceFactory $data{{ ModelName }}Factory,
        protected readonly {{ ModelName }}CollectionFactory ${{ VariableName }}CollectionFactory,
        protected readonly {{ ModelName }}SearchResultsInterfaceFactory $searchResultsFactory,
        protected readonly DataObjectHelper $dataObjectHelper,
        protected readonly DataObjectProcessor $dataObjectProcessor,
        private readonly CollectionProcessorInterface $collectionProcessor,
        protected readonly JoinProcessorInterface $extensionAttributesJoinProcessor,
        protected readonly ExtensibleDataObjectConverter $extensibleDataObjectConverter
    ) {
    }

    /**
     * @throws \Exception
     */
    public function save({{ ModelName }}Interface ${{ VariableName }}): {{ ModelName }}Interface
    {
        ${{ VariableName }}Data = $this->extensibleDataObjectConverter->toNestedArray(
            ${{ VariableName }},
            [],
            {{ ModelName }}Interface::class
        );

        ${{ VariableName }}Model = $this->{{ VariableName }}Factory->create()->setData(${{ VariableName }}Data);

        try {
            $this->resource->save(${{ VariableName }}Model);
        } catch (\Exception $exception) {
            throw new CouldNotSaveException(__(
                'Could not save the {{ VariableName }}: %1',
                $exception->getMessage()
            ));
        }
        return ${{ VariableName }}Model->getDataModel();
    }

    /**
     * @throws NoSuchEntityException
     */
    public function get(int $id): {{ ModelName }}Interface
    {
        ${{ VariableName }} = $this->{{ VariableName }}Factory->create();
        $this->resource->load(${{ VariableName }}, $id);
        if (!${{ VariableName }}->getId()) {
            throw new NoSuchEntityException(__('{{ ModelName }} with id "%1" does not exist.', $id));
        }
        return ${{ VariableName }}->getDataModel();
    }

    public function getList(SearchCriteriaInterface $criteria): {{ ModelName }}SearchResultsInterface
    {
        $collection = $this->{{ VariableName }}CollectionFactory->create();

        $this->extensionAttributesJoinProcessor->process(
            $collection,
            {{ ModelName }}Interface::class
        );

        $this->collectionProcessor->process($criteria, $collection);

        $searchResults = $this->searchResultsFactory->create();
        $searchResults->setSearchCriteria($criteria);

        $items = [];
        foreach ($collection as $model) {
            $items[] = $model->getDataModel();
        }

        $searchResults->setItems($items);
        $searchResults->setTotalCount($collection->getSize());
        return $searchResults;
    }

    /**
     * @throws CouldNotDeleteException
     */
    public function delete({{ ModelName }}Interface ${{ VariableName }}): bool
    {
        try {
            ${{ VariableName }}Model = $this->{{ VariableName }}Factory->create();
            $this->resource->load(${{ VariableName }}Model, ${{ VariableName }}->getEntityId());
            $this->resource->delete(${{ VariableName }}Model);
        } catch (\Exception $exception) {
            throw new CouldNotDeleteException(__(
                'Could not delete the {{ ModelName }}: %1',
                $exception->getMessage()
            ));
        }
        return true;
    }

    public function deleteById(int $id): bool
    {
        return $this->delete($this->get($id));
    }
}
